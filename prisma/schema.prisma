datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [email], references: [email])
  email      String      @unique
  username   String?     @unique
  // dateCreated DateTime   @default(now())
  timetables Timetable[]
}

model Timetable {
  id           String             @id @default(cuid())
  Profile      Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String
  name         String
  dateCreated  DateTime           @default(now())
  lastModified DateTime?          @updatedAt
  classes      ClassInTimetable[]
}

model Subject {
  id      String   @id @default(cuid())
  code    String   @unique
  name    String
  courses Course[]
}

model Course {
  id          String   @id @default(cuid())
  title       String   @unique
  level       Int
  term        String
  detail      String[]
  Subject     Subject  @relation(fields: [subjectCode], references: [code])
  subjectCode String
  classes     Class[]
}

model Class {
  id          String             @id @default(cuid())
  section     Int
  type        Type
  classNumber Int                @unique
  days        Day[]
  startTime   String
  endTime     String
  location    String
  prof        String
  notes       String[]
  status      Status
  campus      Campus
  delivery    Delivery
  Course      Course             @relation(fields: [courseId], references: [id])
  courseId    String
  timetables  ClassInTimetable[]
}

model ClassInTimetable {
  Class       Class     @relation(fields: [classId], references: [id])
  classId     String
  Timetable   Timetable @relation(fields: [timetableId], references: [id])
  timetableId String
  dateAdded   DateTime  @default(now())

  @@id([classId, timetableId])
}

enum Type {
  LEC
  LAB
  TUT
}

enum Day {
  M
  Tu
  W
  Th
  F
}

enum Status {
  FULL
  NOT_FULL
}

enum Campus {
  MAIN
  HURON
  KINGS
  BRESCIA
}

enum Delivery {
  IN_PERSON
  BLENDED
  ONLINE
  OTHER
}
